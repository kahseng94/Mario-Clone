Author of the code review: Jack Lawton
Date of the code review: 07/26/18
Sprint number: Sprint6
File being reviewed: Achievement.cs
Author of the .cs file being reviewed: Mo Zhou
Number of minutes taken to complete the review: 20 mins


The achievement set of classes has a fair number of dependencies and seems to be taking on responsibilities of some other classes. Achievement.cs and AchievementTracker.cs don't really run afoul, but AchievementScreen.cs has an instance of very tight coupling. The SetBackground method uses game.Map, game.Mario, game.WorldLoader, and Game1.Camera directly. I'd say the method is still cohesive, in spite of that. All the logic serves to clear the screen. My suggestion would simply be to try to find a way to lower the number of dependencies by maybe adding a ClearScreen class, or something along those lines. It would have use in a couple of places, since the lives screen in the HUD also needs to clear the screen for its display. Not only would adding a class for that purpose lower the coupling, but it would also reduce redundancy throughout the project.

The obvious change that could be made to impact the screen would be the addition of more achievements. It would add maintenance to a couple of places, including AchievementTracker for the logic, and AchievementScreen being updated to accommodate additional sprites. The nice thing is that all the maintenance would be well contained within those two classes. It may lead to additional dependencies, depending on what the achievement was tracking, but that would be unavoidable. To streamline the addition, adding an interface for the display with some method to call up the sprites would lessen the burden on Achievement Screen. A field for the achievement text within Achievement would also help take away some hard coded maintenance items within AchievementScreen.